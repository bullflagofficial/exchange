{"version":3,"file":"v3-sdk.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/constants.ts","../src/internalConstants.ts","../src/utils/computePoolAddress.ts","../src/utils/liquidityMath.ts","../src/utils/fullMath.ts","../src/utils/sqrtPriceMath.ts","../src/utils/swapMath.ts","../src/utils/mostSignificantBit.ts","../src/utils/tickMath.ts","../src/entities/tickDataProvider.ts","../src/utils/isSorted.ts","../src/utils/tickList.ts","../src/utils/calldata.ts","../src/utils/encodeRouteToPath.ts","../src/utils/encodeSqrtRatioX96.ts","../src/utils/maxLiquidityForAmounts.ts","../src/utils/nearestUsableTick.ts","../src/utils/priceTickConversions.ts","../src/entities/tick.ts","../src/entities/tickListDataProvider.ts","../src/entities/pool.ts","../src/entities/position.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/selfPermit.ts","../src/nonfungiblePositionManager.ts","../src/swapRouter.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","export const FACTORY_ADDRESS = '0x1F98431c8aD98523631AE4a59f267346ea31F984'\n\nexport const ADDRESS_ZERO = '0x0000000000000000000000000000000000000000'\n\nexport const POOL_INIT_CODE_HASH = '0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54'\n\n/**\n * The default factory enabled fee amounts, denominated in hundredths of bips.\n */\nexport enum FeeAmount {\n  LOW = 500,\n  MEDIUM = 3000,\n  HIGH = 10000\n}\n\n/**\n * The default factory tick spacings by fee amount.\n */\nexport const TICK_SPACINGS: { [amount in FeeAmount]: number } = {\n  [FeeAmount.LOW]: 10,\n  [FeeAmount.MEDIUM]: 60,\n  [FeeAmount.HIGH]: 200\n}\n","import JSBI from 'jsbi'\n\n// constants used internally but not expected to be used externally\nexport const NEGATIVE_ONE = JSBI.BigInt(-1)\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\n\n// used in liquidity amount math\nexport const Q96 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(96))\nexport const Q192 = JSBI.exponentiate(Q96, JSBI.BigInt(2))\n","import { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { Token } from '@crystalswap/sdk-core'\nimport { FeeAmount, POOL_INIT_CODE_HASH } from '../constants'\n\nexport function computePoolAddress({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: FeeAmount\n}): string {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(\n      ['bytes'],\n      [defaultAbiCoder.encode(['address', 'address', 'uint24'], [token0.address, token1.address, fee])]\n    ),\n    POOL_INIT_CODE_HASH\n  )\n}\n","import JSBI from 'jsbi'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\n\nexport abstract class LiquidityMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static addDelta(x: JSBI, y: JSBI): JSBI {\n    if (JSBI.lessThan(y, ZERO)) {\n      return JSBI.subtract(x, JSBI.multiply(y, NEGATIVE_ONE))\n    } else {\n      return JSBI.add(x, y)\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { ONE, ZERO } from '../internalConstants'\n\nexport abstract class FullMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static mulDivRoundingUp(a: JSBI, b: JSBI, denominator: JSBI): JSBI {\n    const product = JSBI.multiply(a, b)\n    let result = JSBI.divide(product, denominator)\n    if (JSBI.notEqual(JSBI.remainder(product, denominator), ZERO)) result = JSBI.add(result, ONE)\n    return result\n  }\n}\n","import { MaxUint256 } from '@crystalswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO, Q96 } from '../internalConstants'\nimport { FullMath } from './fullMath'\n\nconst MaxUint160 = JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(160)), ONE)\n\nfunction multiplyIn256(x: JSBI, y: JSBI): JSBI {\n  const product = JSBI.multiply(x, y)\n  return JSBI.bitwiseAnd(product, MaxUint256)\n}\n\nfunction addIn256(x: JSBI, y: JSBI): JSBI {\n  const sum = JSBI.add(x, y)\n  return JSBI.bitwiseAnd(sum, MaxUint256)\n}\n\nexport abstract class SqrtPriceMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getAmount0Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n    }\n\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96))\n    const numerator2 = JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), ONE, sqrtRatioAX96)\n      : JSBI.divide(JSBI.divide(JSBI.multiply(numerator1, numerator2), sqrtRatioBX96), sqrtRatioAX96)\n  }\n\n  public static getAmount1Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n    }\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96), Q96)\n      : JSBI.divide(JSBI.multiply(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)), Q96)\n  }\n\n  public static getNextSqrtPriceFromInput(sqrtPX96: JSBI, liquidity: JSBI, amountIn: JSBI, zeroForOne: boolean): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n      : this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true)\n  }\n\n  public static getNextSqrtPriceFromOutput(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amountOut: JSBI,\n    zeroForOne: boolean\n  ): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n      : this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false)\n  }\n\n  private static getNextSqrtPriceFromAmount0RoundingUp(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (JSBI.equal(amount, ZERO)) return sqrtPX96\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96))\n\n    if (add) {\n      let product = multiplyIn256(amount, sqrtPX96)\n      if (JSBI.equal(JSBI.divide(product, amount), sqrtPX96)) {\n        const denominator = addIn256(numerator1, product)\n        if (JSBI.greaterThanOrEqual(denominator, numerator1)) {\n          return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n        }\n      }\n\n      return FullMath.mulDivRoundingUp(numerator1, ONE, JSBI.add(JSBI.divide(numerator1, sqrtPX96), amount))\n    } else {\n      let product = multiplyIn256(amount, sqrtPX96)\n\n      invariant(JSBI.equal(JSBI.divide(product, amount), sqrtPX96))\n      invariant(JSBI.greaterThan(numerator1, product))\n      const denominator = JSBI.subtract(numerator1, product)\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n    }\n  }\n\n  private static getNextSqrtPriceFromAmount1RoundingDown(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (add) {\n      const quotient = JSBI.lessThanOrEqual(amount, MaxUint160)\n        ? JSBI.divide(JSBI.leftShift(amount, JSBI.BigInt(96)), liquidity)\n        : JSBI.divide(JSBI.multiply(amount, Q96), liquidity)\n\n      return JSBI.add(sqrtPX96, quotient)\n    } else {\n      const quotient = FullMath.mulDivRoundingUp(amount, Q96, liquidity)\n\n      invariant(JSBI.greaterThan(sqrtPX96, quotient))\n      return JSBI.subtract(sqrtPX96, quotient)\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { FeeAmount } from '../constants'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\nimport { FullMath } from './fullMath'\nimport { SqrtPriceMath } from './sqrtPriceMath'\n\nconst MAX_FEE = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(6))\n\nexport abstract class SwapMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static computeSwapStep(\n    sqrtRatioCurrentX96: JSBI,\n    sqrtRatioTargetX96: JSBI,\n    liquidity: JSBI,\n    amountRemaining: JSBI,\n    feePips: FeeAmount\n  ): [JSBI, JSBI, JSBI, JSBI] {\n    const returnValues: Partial<{\n      sqrtRatioNextX96: JSBI\n      amountIn: JSBI\n      amountOut: JSBI\n      feeAmount: JSBI\n    }> = {}\n\n    const zeroForOne = JSBI.greaterThanOrEqual(sqrtRatioCurrentX96, sqrtRatioTargetX96)\n    const exactIn = JSBI.greaterThanOrEqual(amountRemaining, ZERO)\n\n    if (exactIn) {\n      const amountRemainingLessFee = JSBI.divide(\n        JSBI.multiply(amountRemaining, JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))),\n        MAX_FEE\n      )\n      returnValues.amountIn = zeroForOne\n        ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true)\n      if (JSBI.greaterThanOrEqual(amountRemainingLessFee, returnValues.amountIn!)) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          amountRemainingLessFee,\n          zeroForOne\n        )\n      }\n    } else {\n      returnValues.amountOut = zeroForOne\n        ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false)\n      if (JSBI.greaterThanOrEqual(JSBI.multiply(amountRemaining, NEGATIVE_ONE), returnValues.amountOut)) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          JSBI.multiply(amountRemaining, NEGATIVE_ONE),\n          zeroForOne\n        )\n      }\n    }\n\n    const max = JSBI.equal(sqrtRatioTargetX96, returnValues.sqrtRatioNextX96)\n\n    if (zeroForOne) {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount0Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount1Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false)\n    } else {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, false)\n    }\n\n    if (!exactIn && JSBI.greaterThan(returnValues.amountOut!, JSBI.multiply(amountRemaining, NEGATIVE_ONE))) {\n      returnValues.amountOut = JSBI.multiply(amountRemaining, NEGATIVE_ONE)\n    }\n\n    if (exactIn && JSBI.notEqual(returnValues.sqrtRatioNextX96, sqrtRatioTargetX96)) {\n      // we didn't reach the target, so take the remainder of the maximum input as fee\n      returnValues.feeAmount = JSBI.subtract(amountRemaining, returnValues.amountIn!)\n    } else {\n      returnValues.feeAmount = FullMath.mulDivRoundingUp(\n        returnValues.amountIn!,\n        JSBI.BigInt(feePips),\n        JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))\n      )\n    }\n\n    return [returnValues.sqrtRatioNextX96!, returnValues.amountIn!, returnValues.amountOut!, returnValues.feeAmount!]\n  }\n}\n","import { MaxUint256 } from '@crystalswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\n\nconst TWO = JSBI.BigInt(2)\nconst POWERS_OF_2 = [128, 64, 32, 16, 8, 4, 2, 1].map((pow: number): [number, JSBI] => [\n  pow,\n  JSBI.exponentiate(TWO, JSBI.BigInt(pow))\n])\n\nexport function mostSignificantBit(x: JSBI): number {\n  invariant(JSBI.greaterThan(x, ZERO), 'ZERO')\n  invariant(JSBI.lessThanOrEqual(x, MaxUint256), 'MAX')\n\n  let msb: number = 0\n  for (const [power, min] of POWERS_OF_2) {\n    if (JSBI.greaterThanOrEqual(x, min)) {\n      x = JSBI.signedRightShift(x, JSBI.BigInt(power))\n      msb += power\n    }\n  }\n  return msb\n}\n","import { MaxUint256 } from '@crystalswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { mostSignificantBit } from './mostSignificantBit'\n\nfunction mulShift(val: JSBI, mulBy: string): JSBI {\n  return JSBI.signedRightShift(JSBI.multiply(val, JSBI.BigInt(mulBy)), JSBI.BigInt(128))\n}\n\nconst Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32))\n\nexport abstract class TickMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * The minimum tick that can be used on any pool.\n   */\n  public static MIN_TICK: number = -887272\n  /**\n   * The maximum tick that can be used on any pool.\n   */\n  public static MAX_TICK: number = -TickMath.MIN_TICK\n\n  /**\n   * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\n   */\n  public static MIN_SQRT_RATIO: JSBI = JSBI.BigInt('4295128739')\n  /**\n   * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\n   */\n  public static MAX_SQRT_RATIO: JSBI = JSBI.BigInt('1461446703485210103287273052203988822378723970342')\n\n  /**\n   * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\n   * @param tick the tick for which to compute the sqrt ratio\n   */\n  public static getSqrtRatioAtTick(tick: number): JSBI {\n    invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK && Number.isInteger(tick), 'TICK')\n    const absTick: number = tick < 0 ? tick * -1 : tick\n\n    let ratio: JSBI =\n      (absTick & 0x1) != 0\n        ? JSBI.BigInt('0xfffcb933bd6fad37aa2d162d1a594001')\n        : JSBI.BigInt('0x100000000000000000000000000000000')\n    if ((absTick & 0x2) != 0) ratio = mulShift(ratio, '0xfff97272373d413259a46990580e213a')\n    if ((absTick & 0x4) != 0) ratio = mulShift(ratio, '0xfff2e50f5f656932ef12357cf3c7fdcc')\n    if ((absTick & 0x8) != 0) ratio = mulShift(ratio, '0xffe5caca7e10e4e61c3624eaa0941cd0')\n    if ((absTick & 0x10) != 0) ratio = mulShift(ratio, '0xffcb9843d60f6159c9db58835c926644')\n    if ((absTick & 0x20) != 0) ratio = mulShift(ratio, '0xff973b41fa98c081472e6896dfb254c0')\n    if ((absTick & 0x40) != 0) ratio = mulShift(ratio, '0xff2ea16466c96a3843ec78b326b52861')\n    if ((absTick & 0x80) != 0) ratio = mulShift(ratio, '0xfe5dee046a99a2a811c461f1969c3053')\n    if ((absTick & 0x100) != 0) ratio = mulShift(ratio, '0xfcbe86c7900a88aedcffc83b479aa3a4')\n    if ((absTick & 0x200) != 0) ratio = mulShift(ratio, '0xf987a7253ac413176f2b074cf7815e54')\n    if ((absTick & 0x400) != 0) ratio = mulShift(ratio, '0xf3392b0822b70005940c7a398e4b70f3')\n    if ((absTick & 0x800) != 0) ratio = mulShift(ratio, '0xe7159475a2c29b7443b29c7fa6e889d9')\n    if ((absTick & 0x1000) != 0) ratio = mulShift(ratio, '0xd097f3bdfd2022b8845ad8f792aa5825')\n    if ((absTick & 0x2000) != 0) ratio = mulShift(ratio, '0xa9f746462d870fdf8a65dc1f90e061e5')\n    if ((absTick & 0x4000) != 0) ratio = mulShift(ratio, '0x70d869a156d2a1b890bb3df62baf32f7')\n    if ((absTick & 0x8000) != 0) ratio = mulShift(ratio, '0x31be135f97d08fd981231505542fcfa6')\n    if ((absTick & 0x10000) != 0) ratio = mulShift(ratio, '0x9aa508b5b7a84e1c677de54f3e99bc9')\n    if ((absTick & 0x20000) != 0) ratio = mulShift(ratio, '0x5d6af8dedb81196699c329225ee604')\n    if ((absTick & 0x40000) != 0) ratio = mulShift(ratio, '0x2216e584f5fa1ea926041bedfe98')\n    if ((absTick & 0x80000) != 0) ratio = mulShift(ratio, '0x48a170391f7dc42444e8fa2')\n\n    if (tick > 0) ratio = JSBI.divide(MaxUint256, ratio)\n\n    // back to Q96\n    return JSBI.greaterThan(JSBI.remainder(ratio, Q32), ZERO)\n      ? JSBI.add(JSBI.divide(ratio, Q32), ONE)\n      : JSBI.divide(ratio, Q32)\n  }\n\n  /**\n   * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96\n   * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96\n   * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick\n   */\n  public static getTickAtSqrtRatio(sqrtRatioX96: JSBI): number {\n    invariant(\n      JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO) &&\n        JSBI.lessThan(sqrtRatioX96, TickMath.MAX_SQRT_RATIO),\n      'SQRT_RATIO'\n    )\n\n    const sqrtRatioX128 = JSBI.leftShift(sqrtRatioX96, JSBI.BigInt(32))\n\n    const msb = mostSignificantBit(sqrtRatioX128)\n\n    let r: JSBI\n    if (JSBI.greaterThanOrEqual(JSBI.BigInt(msb), JSBI.BigInt(128))) {\n      r = JSBI.signedRightShift(sqrtRatioX128, JSBI.BigInt(msb - 127))\n    } else {\n      r = JSBI.leftShift(sqrtRatioX128, JSBI.BigInt(127 - msb))\n    }\n\n    let log_2: JSBI = JSBI.leftShift(JSBI.subtract(JSBI.BigInt(msb), JSBI.BigInt(128)), JSBI.BigInt(64))\n\n    for (let i = 0; i < 14; i++) {\n      r = JSBI.signedRightShift(JSBI.multiply(r, r), JSBI.BigInt(127))\n      const f = JSBI.signedRightShift(r, JSBI.BigInt(128))\n      log_2 = JSBI.bitwiseOr(log_2, JSBI.leftShift(f, JSBI.BigInt(63 - i)))\n      r = JSBI.signedRightShift(r, f)\n    }\n\n    const log_sqrt10001 = JSBI.multiply(log_2, JSBI.BigInt('255738958999603826347141'))\n\n    const tickLow = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.subtract(log_sqrt10001, JSBI.BigInt('3402992956809132418596140100660247210')),\n        JSBI.BigInt(128)\n      )\n    )\n    const tickHigh = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.add(log_sqrt10001, JSBI.BigInt('291339464771989622907027621153398088495')),\n        JSBI.BigInt(128)\n      )\n    )\n\n    return tickLow === tickHigh\n      ? tickLow\n      : JSBI.lessThanOrEqual(TickMath.getSqrtRatioAtTick(tickHigh), sqrtRatioX96)\n      ? tickHigh\n      : tickLow\n  }\n}\n","import { BigintIsh } from '@crystalswap/sdk-core'\n\n/**\n * Provides information about ticks\n */\nexport interface TickDataProvider {\n  /**\n   * Return information corresponding to a specific tick\n   * @param tick the tick to load\n   */\n  getTick(tick: number): Promise<{ liquidityNet: BigintIsh }>\n\n  /**\n   * Return the next tick that is initialized within a single word\n   * @param tick the current tick\n   * @param lte whether the next tick should be lte the current tick\n   * @param tickSpacing the tick spacing of the pool\n   */\n  nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number): Promise<[number, boolean]>\n}\n\n/**\n * This tick data provider does not know how to fetch any tick data. It throws whenever it is required. Useful if you\n * do not need to load tick data for your use case.\n */\nexport class NoTickDataProvider implements TickDataProvider {\n  private static ERROR_MESSAGE = 'No tick data provider was given'\n  async getTick(_tick: number): Promise<{ liquidityNet: BigintIsh }> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n\n  async nextInitializedTickWithinOneWord(\n    _tick: number,\n    _lte: boolean,\n    _tickSpacing: number\n  ): Promise<[number, boolean]> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n}\n","export function isSorted<T>(list: Array<T>, comparator: (a: T, b: T) => number): boolean {\n  for (let i = 0; i < list.length - 1; i++) {\n    if (comparator(list[i], list[i + 1]) > 0) {\n      return false\n    }\n  }\n  return true\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\nimport { isSorted } from './isSorted'\nimport { Tick } from '../entities/tick'\n\nfunction tickComparator(a: Tick, b: Tick) {\n  return a.index - b.index\n}\n\n/**\n * Utility methods for interacting with sorted lists of ticks\n */\nexport abstract class TickList {\n  /**\n   * Cannot be constructed\n   */\n  private constructor() {}\n\n  public static validateList(ticks: Tick[], tickSpacing: number) {\n    invariant(tickSpacing > 0, 'TICK_SPACING_NONZERO')\n    // ensure ticks are spaced appropriately\n    invariant(\n      ticks.every(({ index }) => index % tickSpacing === 0),\n      'TICK_SPACING'\n    )\n\n    // ensure tick liquidity deltas sum to 0\n    invariant(\n      JSBI.equal(\n        ticks.reduce((accumulator, { liquidityNet }) => JSBI.add(accumulator, liquidityNet), ZERO),\n        ZERO\n      ),\n      'ZERO_NET'\n    )\n\n    invariant(isSorted(ticks, tickComparator), 'SORTED')\n  }\n\n  public static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick < ticks[0].index\n  }\n\n  public static isAtOrAboveLargest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick >= ticks[ticks.length - 1].index\n  }\n\n  public static getTick(ticks: readonly Tick[], index: number): Tick {\n    const tick = ticks[this.binarySearch(ticks, index)]\n    invariant(tick.index === index, 'NOT_CONTAINED')\n    return tick\n  }\n\n  /**\n   * Finds the largest tick in the list of ticks that is less than or equal to tick\n   * @param ticks list of ticks\n   * @param tick tick to find the largest tick that is less than or equal to tick\n   * @private\n   */\n  private static binarySearch(ticks: readonly Tick[], tick: number): number {\n    invariant(!this.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n\n    let l = 0\n    let r = ticks.length - 1\n    let i\n    while (true) {\n      i = Math.floor((l + r) / 2)\n\n      if (ticks[i].index <= tick && (i === ticks.length - 1 || ticks[i + 1].index > tick)) {\n        return i\n      }\n\n      if (ticks[i].index < tick) {\n        l = i + 1\n      } else {\n        r = i - 1\n      }\n    }\n  }\n\n  public static nextInitializedTick(ticks: readonly Tick[], tick: number, lte: boolean): Tick {\n    if (lte) {\n      invariant(!TickList.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n      if (TickList.isAtOrAboveLargest(ticks, tick)) {\n        return ticks[ticks.length - 1]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index]\n    } else {\n      invariant(!this.isAtOrAboveLargest(ticks, tick), 'AT_OR_ABOVE_LARGEST')\n      if (this.isBelowSmallest(ticks, tick)) {\n        return ticks[0]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index + 1]\n    }\n  }\n\n  public static nextInitializedTickWithinOneWord(\n    ticks: readonly Tick[],\n    tick: number,\n    lte: boolean,\n    tickSpacing: number\n  ): [number, boolean] {\n    const compressed = Math.floor(tick / tickSpacing) // matches rounding in the code\n\n    if (lte) {\n      const wordPos = compressed >> 8\n      const minimum = (wordPos << 8) * tickSpacing\n\n      if (TickList.isBelowSmallest(ticks, tick)) {\n        return [minimum, false]\n      }\n\n      const index = TickList.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.max(minimum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    } else {\n      const wordPos = (compressed + 1) >> 8\n      const maximum = ((wordPos + 1) << 8) * tickSpacing - 1\n\n      if (this.isAtOrAboveLargest(ticks, tick)) {\n        return [maximum, false]\n      }\n\n      const index = this.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.min(maximum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    }\n  }\n}\n","import { BigintIsh } from '@crystalswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * Generated method parameters for executing a call.\n */\nexport interface MethodParameters {\n  /**\n   * The hex encoded calldata to perform the given operation\n   */\n  calldata: string\n  /**\n   * The amount of ether (wei) to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(bigintIsh: BigintIsh) {\n  const bigInt = JSBI.BigInt(bigintIsh)\n  let hex = bigInt.toString(16)\n  if (hex.length % 2 !== 0) {\n    hex = `0${hex}`\n  }\n  return `0x${hex}`\n}\n","import { pack } from '@ethersproject/solidity'\nimport { ChainId, Currency, Token, WETH9 } from '@crystalswap/sdk-core'\nimport { Pool } from '../entities/pool'\nimport { Route } from '../entities/route'\n\n/**\n * Converts a route to a hex encoded path\n * @param route the v3 path to convert to an encoded path\n * @param exactOutput whether the route should be encoded in reverse, for making exact output swaps\n */\nexport function encodeRouteToPath(route: Route, exactOutput: boolean): string {\n  const firstInputToken: Token | undefined =\n    route.input instanceof Token\n      ? route.input\n      : route.input === Currency.ETHER\n      ? WETH9[route.chainId as ChainId]\n      : undefined\n\n  if (!firstInputToken) throw new Error('Could not wrap input currency')\n\n  const { path, types } = route.pools.reduce(\n    (\n      { inputToken, path, types }: { inputToken: Token; path: (string | number)[]; types: string[] },\n      pool: Pool,\n      index\n    ): { inputToken: Token; path: (string | number)[]; types: string[] } => {\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\n      if (index === 0) {\n        return {\n          inputToken: outputToken,\n          types: ['address', 'uint24', 'address'],\n          path: [inputToken.address, pool.fee, outputToken.address]\n        }\n      } else {\n        return {\n          inputToken: outputToken,\n          types: [...types, 'uint24', 'address'],\n          path: [...path, pool.fee, outputToken.address]\n        }\n      }\n    },\n    { inputToken: firstInputToken, path: [], types: [] }\n  )\n\n  return exactOutput ? pack(types.reverse(), path.reverse()) : pack(types, path)\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, sqrt } from '@crystalswap/sdk-core'\n\n/**\n * Returns the sqrt ratio as a Q64.96 corresponding to a given ratio of amount1 and amount0\n * @param amount1 the numerator amount, i.e. amount of token1\n * @param amount0 the denominator amount, i.en amount of token0\n */\nexport function encodeSqrtRatioX96(amount1: BigintIsh, amount0: BigintIsh): JSBI {\n  const numerator = JSBI.leftShift(JSBI.BigInt(amount1), JSBI.BigInt(192))\n  const denominator = JSBI.BigInt(amount0)\n  const ratioX192 = JSBI.divide(numerator, denominator)\n  return sqrt(ratioX192)\n}\n","import { BigintIsh } from '@crystalswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { Q96 } from '../internalConstants'\n\nfunction maxLiquidityForAmount0(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  const intermediate = JSBI.divide(JSBI.multiply(sqrtRatioAX96, sqrtRatioBX96), Q96)\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount0), intermediate), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n}\n\nfunction maxLiquidityForAmount1(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount1: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount1), Q96), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n * and the prices at the tick boundaries.\n * @param sqrtRatioCurrentX96 the current price\n * @param sqrtRatioAX96 price at lower boundary\n * @param sqrtRatioBX96 price at upper boundary\n * @param amount0 token0 amount\n * @param amount1 token1 amount\n */\nexport function maxLiquidityForAmounts(\n  sqrtRatioCurrentX96: JSBI,\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigintIsh,\n  amount1: BigintIsh\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  if (JSBI.lessThanOrEqual(sqrtRatioCurrentX96, sqrtRatioAX96)) {\n    return maxLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0)\n  } else if (JSBI.lessThan(sqrtRatioCurrentX96, sqrtRatioBX96)) {\n    const liquidity0 = maxLiquidityForAmount0(sqrtRatioCurrentX96, sqrtRatioBX96, amount0)\n    const liquidity1 = maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioCurrentX96, amount1)\n    return JSBI.lessThan(liquidity0, liquidity1) ? liquidity0 : liquidity1\n  } else {\n    return maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns the closest tick that is nearest a given tick and usable for the given tick spacing\n * @param tick the target tick\n * @param tickSpacing the spacing of the pool\n */\nexport function nearestUsableTick(tick: number, tickSpacing: number) {\n  invariant(Number.isInteger(tick) && Number.isInteger(tickSpacing), 'INTEGERS')\n  invariant(tickSpacing > 0, 'TICK_SPACING')\n  invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK, 'TICK_BOUND')\n  const rounded = Math.round(tick / tickSpacing) * tickSpacing\n  if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing\n  else if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing\n  else return rounded\n}\n","import { Price, Token } from '@crystalswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Q192 } from '../internalConstants'\nimport { encodeSqrtRatioX96 } from './encodeSqrtRatioX96'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns a price object corresponding to the input tick and the base/quote token\n * Inputs must be tokens because the address order is used to interpret the price represented by the tick\n * @param baseToken the base token of the price\n * @param quoteToken the quote token of the price\n * @param tick the tick for which to return the price\n */\nexport function tickToPrice(baseToken: Token, quoteToken: Token, tick: number): Price {\n  const sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick)\n\n  const ratioX192 = JSBI.multiply(sqrtRatioX96, sqrtRatioX96)\n\n  return baseToken.sortsBefore(quoteToken)\n    ? new Price(baseToken, quoteToken, Q192, ratioX192)\n    : new Price(baseToken, quoteToken, ratioX192, Q192)\n}\n\n/**\n * Returns the first tick for which the given price is greater than or equal to the tick price\n * @param price for which to return the closest tick that represents a price less than or equal to the input price,\n * i.e. the price of the returned tick is less than or equal to the input price\n */\nexport function priceToClosestTick(price: Price): number {\n  invariant(price.baseCurrency instanceof Token && price.quoteCurrency instanceof Token, 'TOKENS')\n\n  const sorted = price.baseCurrency.sortsBefore(price.quoteCurrency)\n\n  const sqrtRatioX96 = sorted\n    ? encodeSqrtRatioX96(price.raw.numerator, price.raw.denominator)\n    : encodeSqrtRatioX96(price.raw.denominator, price.raw.numerator)\n\n  let tick = TickMath.getTickAtSqrtRatio(sqrtRatioX96)\n  const nextTickPrice = tickToPrice(price.baseCurrency, price.quoteCurrency, tick + 1)\n  if (sorted) {\n    if (!price.lessThan(nextTickPrice)) {\n      tick++\n    }\n  } else {\n    if (!price.greaterThan(nextTickPrice)) {\n      tick++\n    }\n  }\n  return tick\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { BigintIsh } from '@crystalswap/sdk-core'\nimport { TickMath } from '../utils'\n\nexport interface TickConstructorArgs {\n  index: number\n  liquidityGross: BigintIsh\n  liquidityNet: BigintIsh\n}\n\nexport class Tick {\n  public readonly index: number\n  public readonly liquidityGross: JSBI\n  public readonly liquidityNet: JSBI\n\n  constructor({ index, liquidityGross, liquidityNet }: TickConstructorArgs) {\n    invariant(index >= TickMath.MIN_TICK && index <= TickMath.MAX_TICK, 'TICK')\n    this.index = index\n    this.liquidityGross = JSBI.BigInt(liquidityGross)\n    this.liquidityNet = JSBI.BigInt(liquidityNet)\n  }\n}\n","import { BigintIsh } from '@crystalswap/sdk-core'\nimport { TickList } from '../utils/tickList'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { TickDataProvider } from './tickDataProvider'\n\n/**\n * A data provider for ticks that is backed by an in-memory array of ticks.\n */\nexport class TickListDataProvider implements TickDataProvider {\n  private ticks: readonly Tick[]\n\n  constructor(ticks: (Tick | TickConstructorArgs)[], tickSpacing: number) {\n    const ticksMapped: Tick[] = ticks.map(t => (t instanceof Tick ? t : new Tick(t)))\n    TickList.validateList(ticksMapped, tickSpacing)\n    this.ticks = ticksMapped\n  }\n\n  async getTick(tick: number): Promise<{ liquidityNet: BigintIsh; liquidityGross: BigintIsh }> {\n    return TickList.getTick(this.ticks, tick)\n  }\n\n  async nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number): Promise<[number, boolean]> {\n    return TickList.nextInitializedTickWithinOneWord(this.ticks, tick, lte, tickSpacing)\n  }\n}\n","import { BigintIsh, ChainId, Price, Token, TokenAmount } from '@crystalswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { FACTORY_ADDRESS, FeeAmount, TICK_SPACINGS } from '../constants'\nimport { NEGATIVE_ONE, ONE, Q192, ZERO } from '../internalConstants'\nimport { computePoolAddress } from '../utils/computePoolAddress'\nimport { LiquidityMath } from '../utils/liquidityMath'\nimport { SwapMath } from '../utils/swapMath'\nimport { TickMath } from '../utils/tickMath'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { NoTickDataProvider, TickDataProvider } from './tickDataProvider'\nimport { TickListDataProvider } from './tickListDataProvider'\n\ninterface StepComputations {\n  sqrtPriceStartX96: JSBI\n  tickNext: number\n  initialized: boolean\n  sqrtPriceNextX96: JSBI\n  amountIn: JSBI\n  amountOut: JSBI\n  feeAmount: JSBI\n}\n\n/**\n * By default, pools will not allow operations that require ticks.\n */\nconst NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider()\n\n/**\n * Represents a V3 pool\n */\nexport class Pool {\n  public readonly token0: Token\n  public readonly token1: Token\n  public readonly fee: FeeAmount\n  public readonly sqrtRatioX96: JSBI\n  public readonly liquidity: JSBI\n  public readonly tickCurrent: number\n  public readonly tickDataProvider: TickDataProvider\n\n  private _token0Price?: Price\n  private _token1Price?: Price\n\n  public static getAddress(tokenA: Token, tokenB: Token, fee: FeeAmount): string {\n    return computePoolAddress({ factoryAddress: FACTORY_ADDRESS, fee, tokenA, tokenB })\n  }\n\n  /**\n   * Construct a pool\n   * @param tokenA one of the tokens in the pool\n   * @param tokenB the other token in the pool\n   * @param fee the fee in hundredths of a bips of the input amount of every swap that is collected by the pool\n   * @param sqrtRatioX96 the sqrt of the current ratio of amounts of token1 to token0\n   * @param liquidity the current value of in range liquidity\n   * @param tickCurrent the current tick of the pool\n   * @param ticks the current state of the pool ticks or a data provider that can return tick data\n   */\n  public constructor(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    sqrtRatioX96: BigintIsh,\n    liquidity: BigintIsh,\n    tickCurrent: number,\n    ticks: TickDataProvider | (Tick | TickConstructorArgs)[] = NO_TICK_DATA_PROVIDER_DEFAULT\n  ) {\n    invariant(Number.isInteger(fee) && fee < 1_000_000, 'FEE')\n\n    const tickCurrentSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent)\n    const nextTickSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent + 1)\n    invariant(\n      JSBI.greaterThanOrEqual(JSBI.BigInt(sqrtRatioX96), tickCurrentSqrtRatioX96) &&\n        JSBI.lessThanOrEqual(JSBI.BigInt(sqrtRatioX96), nextTickSqrtRatioX96),\n      'PRICE_BOUNDS'\n    )\n    // always create a copy of the list since we want the pool's tick list to be immutable\n    ;[this.token0, this.token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n    this.fee = fee\n    this.sqrtRatioX96 = JSBI.BigInt(sqrtRatioX96)\n    this.liquidity = JSBI.BigInt(liquidity)\n    this.tickCurrent = tickCurrent\n    this.tickDataProvider = Array.isArray(ticks) ? new TickListDataProvider(ticks, TICK_SPACINGS[fee]) : ticks\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token0, i.e. the ratio of token1 over token0\n   */\n  public get token0Price(): Price {\n    return (\n      this._token0Price ??\n      (this._token0Price = new Price(\n        this.token0,\n        this.token1,\n        Q192,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96)\n      ))\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token1, i.e. the ratio of token0 over token1\n   */\n  public get token1Price(): Price {\n    return (\n      this._token1Price ??\n      (this._token1Price = new Price(\n        this.token1,\n        this.token0,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\n        Q192\n      ))\n    )\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pool.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pool.\n   */\n  public get chainId(): ChainId | number {\n    return this.token0.chainId\n  }\n\n  /**\n   * Given an input amount of a token, return the computed output amount and a pool with state updated after the trade\n   * @param inputAmount the input amount for which to quote the output amount\n   */\n  public async getOutputAmount(inputAmount: TokenAmount): Promise<[TokenAmount, Pool]> {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n\n    const zeroForOne = inputAmount.token.equals(this.token0)\n\n    const { amountCalculated: outputAmount, sqrtRatioX96, liquidity, tickCurrent } = await this.swap(\n      zeroForOne,\n      inputAmount.raw\n    )\n    const outputToken = zeroForOne ? this.token1 : this.token0\n    return [\n      new TokenAmount(outputToken, JSBI.multiply(outputAmount, NEGATIVE_ONE)),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX96, liquidity, tickCurrent, this.tickDataProvider)\n    ]\n  }\n\n  /**\n   * Given a desired output amount of a token, return the computed input amount and a pool with state updated after the trade\n   * @param outputAmount the output amount for which to quote the input amount\n   */\n  public async getInputAmount(outputAmount: TokenAmount): Promise<[TokenAmount, Pool]> {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n\n    const zeroForOne = outputAmount.token.equals(this.token1)\n\n    const { amountCalculated: inputAmount, sqrtRatioX96, liquidity, tickCurrent } = await this.swap(\n      zeroForOne,\n      JSBI.multiply(outputAmount.raw, NEGATIVE_ONE)\n    )\n    const inputToken = zeroForOne ? this.token0 : this.token1\n    return [\n      new TokenAmount(inputToken, inputAmount),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX96, liquidity, tickCurrent, this.tickDataProvider)\n    ]\n  }\n\n  private async swap(\n    zeroForOne: boolean,\n    amountSpecified: JSBI,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<{ amountCalculated: JSBI; sqrtRatioX96: JSBI; liquidity: JSBI; tickCurrent: number }> {\n    if (!sqrtPriceLimitX96)\n      sqrtPriceLimitX96 = zeroForOne\n        ? JSBI.add(TickMath.MIN_SQRT_RATIO, ONE)\n        : JSBI.subtract(TickMath.MAX_SQRT_RATIO, ONE)\n\n    if (zeroForOne) {\n      invariant(JSBI.greaterThan(sqrtPriceLimitX96, TickMath.MIN_SQRT_RATIO), 'RATIO_MIN')\n      invariant(JSBI.lessThan(sqrtPriceLimitX96, this.sqrtRatioX96), 'RATIO_CURRENT')\n    } else {\n      invariant(JSBI.lessThan(sqrtPriceLimitX96, TickMath.MAX_SQRT_RATIO), 'RATIO_MAX')\n      invariant(JSBI.greaterThan(sqrtPriceLimitX96, this.sqrtRatioX96), 'RATIO_CURRENT')\n    }\n\n    const exactInput = JSBI.greaterThanOrEqual(amountSpecified, ZERO)\n\n    // keep track of swap state\n    const state = {\n      amountSpecifiedRemaining: amountSpecified,\n      amountCalculated: ZERO,\n      sqrtPriceX96: this.sqrtRatioX96,\n      tick: this.tickCurrent,\n      liquidity: this.liquidity\n    }\n\n    // start swap while loop\n    while (JSBI.notEqual(state.amountSpecifiedRemaining, ZERO) && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n      let step: Partial<StepComputations> = {}\n      step.sqrtPriceStartX96 = state.sqrtPriceX96\n\n      // because each iteration of the while loop rounds, we can't optimize this code (relative to the smart contract)\n      // by simply traversing to the next available tick, we instead need to exactly replicate\n      // tickBitmap.nextInitializedTickWithinOneWord\n      ;[step.tickNext, step.initialized] = await this.tickDataProvider.nextInitializedTickWithinOneWord(\n        state.tick,\n        zeroForOne,\n        this.tickSpacing\n      )\n\n      if (step.tickNext < TickMath.MIN_TICK) {\n        step.tickNext = TickMath.MIN_TICK\n      } else if (step.tickNext > TickMath.MAX_TICK) {\n        step.tickNext = TickMath.MAX_TICK\n      }\n\n      step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext)\n      ;[state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.computeSwapStep(\n        state.sqrtPriceX96,\n        (zeroForOne\n        ? JSBI.lessThan(step.sqrtPriceNextX96, sqrtPriceLimitX96)\n        : JSBI.greaterThan(step.sqrtPriceNextX96, sqrtPriceLimitX96))\n          ? sqrtPriceLimitX96\n          : step.sqrtPriceNextX96,\n        state.liquidity,\n        state.amountSpecifiedRemaining,\n        this.fee\n      )\n\n      if (exactInput) {\n        state.amountSpecifiedRemaining = JSBI.subtract(\n          state.amountSpecifiedRemaining,\n          JSBI.add(step.amountIn, step.feeAmount)\n        )\n        state.amountCalculated = JSBI.subtract(state.amountCalculated, step.amountOut)\n      } else {\n        state.amountSpecifiedRemaining = JSBI.add(state.amountSpecifiedRemaining, step.amountOut)\n        state.amountCalculated = JSBI.add(state.amountCalculated, JSBI.add(step.amountIn, step.feeAmount))\n      }\n\n      // TODO\n      if (JSBI.equal(state.sqrtPriceX96, step.sqrtPriceNextX96)) {\n        // if the tick is initialized, run the tick transition\n        if (step.initialized) {\n          let liquidityNet = JSBI.BigInt((await this.tickDataProvider.getTick(step.tickNext)).liquidityNet)\n          // if we're moving leftward, we interpret liquidityNet as the opposite sign\n          // safe because liquidityNet cannot be type(int128).min\n          if (zeroForOne) liquidityNet = JSBI.multiply(liquidityNet, NEGATIVE_ONE)\n\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet)\n        }\n\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext\n      } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n        // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n        state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96)\n      }\n    }\n\n    return {\n      amountCalculated: state.amountCalculated,\n      sqrtRatioX96: state.sqrtPriceX96,\n      liquidity: state.liquidity,\n      tickCurrent: state.tick\n    }\n  }\n\n  public get tickSpacing(): number {\n    return TICK_SPACINGS[this.fee]\n  }\n}\n","import { BigintIsh, MaxUint256, Percent, Price, TokenAmount } from '@crystalswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\nimport { maxLiquidityForAmounts } from '../utils/maxLiquidityForAmounts'\nimport { tickToPrice } from '../utils/priceTickConversions'\nimport { SqrtPriceMath } from '../utils/sqrtPriceMath'\nimport { TickMath } from '../utils/tickMath'\nimport { encodeSqrtRatioX96 } from '../utils/encodeSqrtRatioX96'\nimport { Pool } from './pool'\n\ninterface PositionConstructorArgs {\n  pool: Pool\n  tickLower: number\n  tickUpper: number\n  liquidity: BigintIsh\n}\n\n/**\n * Represents a position on a Crystalswap V3 Pool\n */\nexport class Position {\n  public readonly pool: Pool\n  public readonly tickLower: number\n  public readonly tickUpper: number\n  public readonly liquidity: JSBI\n\n  // cached resuts for the getters\n  private _token0Amount: TokenAmount | null = null\n  private _token1Amount: TokenAmount | null = null\n  private _mintAmounts: Readonly<{ amount0: JSBI; amount1: JSBI }> | null = null\n\n  /**\n   * Constructs a position for a given pool with the given liquidity\n   * @param pool for which pool the liquidity is assigned\n   * @param liquidity the amount of liquidity that is in the position\n   * @param tickLower the lower tick of the position\n   * @param tickUpper the upper tick of the position\n   */\n  public constructor({ pool, liquidity, tickLower, tickUpper }: PositionConstructorArgs) {\n    invariant(tickLower < tickUpper, 'TICK_ORDER')\n    invariant(tickLower >= TickMath.MIN_TICK && tickLower % pool.tickSpacing === 0, 'TICK_LOWER')\n    invariant(tickUpper <= TickMath.MAX_TICK && tickUpper % pool.tickSpacing === 0, 'TICK_UPPER')\n\n    this.pool = pool\n    this.tickLower = tickLower\n    this.tickUpper = tickUpper\n    this.liquidity = JSBI.BigInt(liquidity)\n  }\n\n  /**\n   * Returns the price of token0 at the lower tick\n   */\n  public get token0PriceLower(): Price {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickLower)\n  }\n\n  /**\n   * Returns the price of token0 at the upper tick\n   */\n  public get token0PriceUpper(): Price {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickUpper)\n  }\n\n  /**\n   * Returns the amount of token0 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount0(): TokenAmount {\n    if (this._token0Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token0Amount = new TokenAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token0Amount = new TokenAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token0Amount = new TokenAmount(this.pool.token0, ZERO)\n      }\n    }\n    return this._token0Amount\n  }\n\n  /**\n   * Returns the amount of token1 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount1(): TokenAmount {\n    if (this._token1Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token1Amount = new TokenAmount(this.pool.token1, ZERO)\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token1Amount = new TokenAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token1Amount = new TokenAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      }\n    }\n    return this._token1Amount\n  }\n\n  /**\n   * Get the minimum amounts that must be spent to safely create this position, for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the current price\n   */\n  public minimumAmounts(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const priceLower = this.pool.token0Price.raw.multiply(new Percent(1).subtract(slippageTolerance))\n    const priceUpper = this.pool.token0Price.raw.multiply(slippageTolerance.add(1))\n    const sqrtRatioX96Lower = encodeSqrtRatioX96(priceLower.numerator, priceLower.denominator)\n    const sqrtRatioX96Upper = encodeSqrtRatioX96(priceUpper.numerator, priceUpper.denominator)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const amount0 = new Position({\n      pool: poolUpper,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).amount0\n    // ...and the lower for amount1\n    const amount1 = new Position({\n      pool: poolLower,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).amount1\n\n    return { amount0: amount0.raw, amount1: amount1.raw }\n  }\n\n  /**\n   * Returns the minimum amount that must be sent in order to mint the amount of liquidity held by the position at\n   * the current price for the pool\n   */\n  public get mintAmounts(): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    if (this._mintAmounts === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: ZERO\n        }\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            true\n          )\n        }\n      } else {\n        return {\n          amount0: ZERO,\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          )\n        }\n      }\n    }\n    return this._mintAmounts\n  }\n\n  /**\n   * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n   * and the prices at the tick boundaries.\n   * @param pool the pool for which the position should be created\n   * @param tickLower the lower tick of the position\n   * @param tickUpper the upper tick of the position\n   * @param amount0 token0 amount\n   * @param amount1 token1 amount\n   */\n  public static fromAmounts({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    amount1\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    amount1: BigintIsh\n  }) {\n    const sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower)\n    const sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper)\n    return new Position({\n      pool,\n      tickLower,\n      tickUpper,\n      liquidity: maxLiquidityForAmounts(pool.sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, amount0, amount1)\n    })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1\n   * @param pool the pool for which the position is created\n   * @param tickLower the lower tick\n   * @param tickUpper the upper tick\n   * @param amount0 the desired amount of token0\n   */\n  public static fromAmount0({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n  }) {\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0, amount1: MaxUint256 })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0\n   * @param pool the pool for which the position is created\n   * @param tickLower the lower tick\n   * @param tickUpper the upper tick\n   * @param amount1 the desired amount of token1\n   */\n  public static fromAmount1({\n    pool,\n    tickLower,\n    tickUpper,\n    amount1\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount1: BigintIsh\n  }) {\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0: MaxUint256, amount1 })\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, Currency, ETHER, Price, Token, WETH9 } from '@crystalswap/sdk-core'\nimport { Pool } from './pool'\n\n/**\n * Represents a list of pools through which a swap can occur\n */\nexport class Route {\n  public readonly pools: Pool[]\n  public readonly tokenPath: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n\n  private _midPrice: Price | null = null\n\n  public constructor(pools: Pool[], input: Currency, output?: Currency) {\n    invariant(pools.length > 0, 'POOLS')\n\n    const chainId = pools[0].chainId\n    const allOnSameChain = pools.every(pool => pool.chainId === chainId)\n    invariant(allOnSameChain, 'CHAIN_IDS')\n\n    const weth: Token | undefined = WETH9[chainId as ChainId]\n\n    const inputTokenIsInFirstPool = input instanceof Token && pools[0].involvesToken(input)\n    const inputWethIsInFirstPool = input === ETHER && weth && pools[0].involvesToken(weth)\n    const inputIsValid = inputTokenIsInFirstPool || inputWethIsInFirstPool\n    invariant(inputIsValid, 'INPUT')\n\n    const noOutput = typeof output === 'undefined'\n    const outputTokenIsInLastPool = output instanceof Token && pools[pools.length - 1].involvesToken(output)\n    const outputWethIsInLastPool = output === ETHER && weth && pools[pools.length - 1].involvesToken(weth)\n    const outputIsValid = noOutput || outputTokenIsInLastPool || outputWethIsInLastPool\n    invariant(outputIsValid, 'OUTPUT')\n\n    /**\n     * Normalizes token0-token1 order and selects the next token/fee step to add to the path\n     * */\n    const tokenPath: Token[] = [input instanceof Token ? input : weth]\n    for (const [i, pool] of pools.entries()) {\n      const currentInputToken = tokenPath[i]\n      invariant(currentInputToken.equals(pool.token0) || currentInputToken.equals(pool.token1), 'PATH')\n      const nextToken = currentInputToken.equals(pool.token0) ? pool.token1 : pool.token0\n      tokenPath.push(nextToken)\n    }\n\n    this.pools = pools\n    this.tokenPath = tokenPath\n    this.input = input\n    this.output = output ?? tokenPath[tokenPath.length - 1]\n  }\n\n  public get chainId(): ChainId | number {\n    return this.pools[0].chainId\n  }\n\n  /**\n   * Returns the token representation of the input currency. If the input currency is Ether, returns the wrapped ether token.\n   */\n  public get inputToken(): Token {\n    if (this.input instanceof Token) return this.input\n    invariant(this.input === Currency.ETHER, 'ETHER')\n    return WETH9[this.chainId as ChainId]\n  }\n\n  /**\n   * Returns the token representation of the output currency. If the output currency is Ether, returns the wrapped ether token.\n   */\n  public get outputToken(): Token {\n    if (this.output instanceof Token) return this.output\n    invariant(this.output === Currency.ETHER, 'ETHER')\n    return WETH9[this.chainId as ChainId]\n  }\n\n  /**\n   * Returns the mid price of the route\n   */\n  public get midPrice(): Price {\n    if (this._midPrice !== null) return this._midPrice\n\n    const price = this.pools.slice(1).reduce(\n      ({ nextInput, price }, pool) => {\n        return nextInput.equals(pool.token0)\n          ? {\n              nextInput: pool.token1,\n              price: price.multiply(pool.token0Price)\n            }\n          : {\n              nextInput: pool.token0,\n              price: price.multiply(pool.token1Price)\n            }\n      },\n      this.pools[0].token0.equals(this.inputToken)\n        ? {\n            nextInput: this.pools[0].token1,\n            price: this.pools[0].token0Price\n          }\n        : {\n            nextInput: this.pools[0].token0,\n            price: this.pools[0].token1Price\n          }\n    ).price\n\n    return (this._midPrice = new Price(this.input, this.output, price.denominator, price.numerator))\n  }\n}\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  currencyEquals,\n  ETHER,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  Token,\n  TokenAmount,\n  TradeType,\n  WETH9\n} from '@crystalswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { Pool } from './pool'\nimport { Route } from './route'\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      return a.route.tokenPath.length - b.route.tokenPath.length\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH9[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH9[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pools.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pools the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price | undefined\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.raw,\n        this.outputAmount.raw\n      ))\n    )\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static async exactIn(route: Route, amountIn: CurrencyAmount): Promise<Trade> {\n    return Trade.fromRoute(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static async exactOut(route: Route, amountOut: CurrencyAmount): Promise<Trade> {\n    return Trade.fromRoute(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   */\n  public static async fromRoute(route: Route, amount: CurrencyAmount, tradeType: TradeType): Promise<Trade> {\n    const amounts: TokenAmount[] = new Array(route.tokenPath.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.tokenPath.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount] = await pool.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.tokenPath.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        const [inputAmount] = await pool.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n      }\n    }\n\n    const inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    const outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    return new Trade({\n      route,\n      tradeType,\n      inputAmount,\n      outputAmount\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @param constructorArguments the arguments passed to the trade constructor\n   */\n  public static createUncheckedTrade(constructorArguments: {\n    route: Route\n    inputAmount: CurrencyAmount\n    outputAmount: CurrencyAmount\n    tradeType: TradeType\n  }): Trade {\n    return new Trade(constructorArguments)\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param route the route through which the trade occurs\n   * @param inputAmount the amount of input paid in the trade\n   * @param outputAmount the amount of output received in the trade\n   * @param tradeType the type of trade, exact input or exact output\n   */\n  private constructor({\n    route,\n    inputAmount,\n    outputAmount,\n    tradeType\n  }: {\n    route: Route\n    inputAmount: CurrencyAmount\n    outputAmount: CurrencyAmount\n    tradeType: TradeType\n  }) {\n    invariant(currencyEquals(inputAmount.currency, route.input), 'INPUT_CURRENCY_MATCH')\n    invariant(currencyEquals(outputAmount.currency, route.output), 'OUTPUT_CURRENCY_MATCH')\n    this.route = route\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.tradeType = tradeType\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).raw,\n      this.minimumAmountOut(slippageTolerance).raw\n    )\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static async bestTradeExactIn(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Promise<Trade[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountIn.token) && !pool.token1.equals(amountIn.token)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = await pool.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([...currentPools, pool], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactIn(\n          poolsExcludingThisPool,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPools, pool],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static async bestTradeExactOut(\n    pools: Pool[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Promise<Trade[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountOut.token) && !pool.token1.equals(amountOut.token)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = await pool.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pool\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([pool, ...currentPools], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactOut(\n          poolsExcludingThisPool,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pool, ...currentPools],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigintIsh, Token } from '@crystalswap/sdk-core'\nimport { Interface } from '@ethersproject/abi'\nimport { abi } from '@crystalswap/v3-periphery/artifacts/contracts/interfaces/ISelfPermit.sol/ISelfPermit.json'\nimport { toHex } from './utils'\n\nexport interface StandardPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  amount: BigintIsh\n  deadline: BigintIsh\n}\n\nexport interface AllowedPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  nonce: BigintIsh\n  expiry: BigintIsh\n}\n\nexport type PermitOptions = StandardPermitArguments | AllowedPermitArguments\n\n// type guard\nfunction isAllowedPermit(permitOptions: PermitOptions): permitOptions is AllowedPermitArguments {\n  return 'nonce' in permitOptions\n}\n\nexport abstract class SelfPermit {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  protected constructor() {}\n\n  protected static encodePermit(token: Token, options: PermitOptions) {\n    return isAllowedPermit(options)\n      ? SelfPermit.INTERFACE.encodeFunctionData('selfPermitAllowed', [\n          token.address,\n          toHex(options.nonce),\n          toHex(options.expiry),\n          options.v,\n          options.r,\n          options.s\n        ])\n      : SelfPermit.INTERFACE.encodeFunctionData('selfPermit', [\n          token.address,\n          toHex(options.amount),\n          toHex(options.deadline),\n          options.v,\n          options.r,\n          options.s\n        ])\n  }\n}\n","import {\n  BigintIsh,\n  ChainId,\n  CurrencyAmount,\n  currencyEquals,\n  ETHER,\n  Percent,\n  Token,\n  TokenAmount,\n  validateAndParseAddress,\n  WETH9\n} from '@crystalswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Position } from './entities/position'\nimport { ONE, ZERO } from './internalConstants'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { Interface } from '@ethersproject/abi'\nimport { abi } from '@crystalswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json'\nimport { PermitOptions, SelfPermit } from './selfPermit'\nimport { ADDRESS_ZERO } from './constants'\n\nconst MaxUint128 = toHex(JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128)), JSBI.BigInt(1)))\n\nexport interface MintSpecificOptions {\n  /**\n   * The account that should receive the minted NFT.\n   */\n  recipient: string\n\n  /**\n   * Creates pool if not initialized before mint.\n   */\n  createPool?: boolean\n}\n\nexport interface IncreaseSpecificOptions {\n  /**\n   * Indicates the ID of the position to increase liquidity for.\n   */\n  tokenId: BigintIsh\n}\n\n/**\n * Options for producing the calldata to add liquidity.\n */\nexport interface CommonAddLiquidityOptions {\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether to spend ether. If true, one of the pool tokens must be WETH, by default false\n   */\n  useEther?: boolean\n\n  /**\n   * The optional permit parameters for spending token0\n   */\n  token0Permit?: PermitOptions\n\n  /**\n   * The optional permit parameters for spending token1\n   */\n  token1Permit?: PermitOptions\n}\n\nexport type MintOptions = CommonAddLiquidityOptions & MintSpecificOptions\nexport type IncreaseOptions = CommonAddLiquidityOptions & IncreaseSpecificOptions\n\nexport type AddLiquidityOptions = MintOptions | IncreaseOptions\n\n// type guard\nfunction isMint(options: AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some(k => k === 'recipient')\n}\n\nexport interface CollectOptions {\n  /**\n   * Indicates the ID of the position to collect for.\n   */\n  tokenId: BigintIsh\n\n  /**\n   * Expected value of tokensOwed0, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed0: CurrencyAmount\n\n  /**\n   * Expected value of tokensOwed1, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed1: CurrencyAmount\n\n  /**\n   * The account that should receive the tokens.\n   */\n  recipient: string\n}\n\nexport interface NFTPermitOptions {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  deadline: BigintIsh\n  spender: string\n}\n\n/**\n * Options for producing the calldata to exit a position.\n */\nexport interface RemoveLiquidityOptions {\n  /**\n   * The ID of the token to exit\n   */\n  tokenId: BigintIsh\n\n  /**\n   * The percentage of position liquidity to exit.\n   */\n  liquidityPercentage: Percent\n\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether the NFT should be burned if the entire position is being exited, by default false.\n   */\n  burnToken?: boolean\n\n  /**\n   * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\n   */\n  permit?: NFTPermitOptions\n\n  /**\n   * Parameters to be passed on to collect\n   */\n  collectOptions: Omit<CollectOptions, 'tokenId'>\n}\n\nexport abstract class NonfungiblePositionManager extends SelfPermit {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    super()\n  }\n\n  public static addCallParameters(position: Position, options: AddLiquidityOptions): MethodParameters {\n    invariant(JSBI.greaterThan(position.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    const calldatas: string[] = []\n\n    // get amounts\n    const { amount0: amount0Desired, amount1: amount1Desired } = position.mintAmounts\n\n    // adjust for slippage\n    const minimumAmounts = position.minimumAmounts(options.slippageTolerance)\n    const amount0Min = toHex(minimumAmounts.amount0)\n    const amount1Min = toHex(minimumAmounts.amount1)\n\n    const deadline = toHex(options.deadline)\n\n    // create pool if needed\n    if (isMint(options) && options.createPool) {\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('createAndInitializePoolIfNecessary', [\n          position.pool.token0.address,\n          position.pool.token1.address,\n          position.pool.fee,\n          toHex(position.pool.sqrtRatioX96)\n        ])\n      )\n    }\n\n    // permits if necessary\n    if (options.token0Permit) {\n      calldatas.push(NonfungiblePositionManager.encodePermit(position.pool.token0, options.token0Permit))\n    }\n    if (options.token1Permit) {\n      calldatas.push(NonfungiblePositionManager.encodePermit(position.pool.token1, options.token1Permit))\n    }\n\n    // mint\n    if (isMint(options)) {\n      const recipient: string = validateAndParseAddress(options.recipient)\n\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\n          {\n            token0: position.pool.token0.address,\n            token1: position.pool.token1.address,\n            fee: position.pool.fee,\n            tickLower: position.tickLower,\n            tickUpper: position.tickUpper,\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            recipient,\n            deadline\n          }\n        ])\n      )\n    } else {\n      // increase\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('increaseLiquidity', [\n          {\n            tokenId: toHex(options.tokenId),\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            deadline\n          }\n        ])\n      )\n    }\n\n    let value: string = toHex(0)\n\n    if (options.useEther) {\n      const weth = WETH9[position.pool.chainId as ChainId]\n      invariant(weth && (position.pool.token0.equals(weth) || position.pool.token1.equals(weth)), 'NO_WETH')\n\n      const wethValue = position.pool.token0.equals(weth) ? amount0Desired : amount1Desired\n\n      // we only need to refund if we're actually sending ETH\n      if (JSBI.greaterThan(wethValue, ZERO)) {\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('refundETH'))\n      }\n\n      value = toHex(wethValue)\n    }\n\n    return {\n      calldata:\n        calldatas.length === 1\n          ? calldatas[0]\n          : NonfungiblePositionManager.INTERFACE.encodeFunctionData('multicall', [calldatas]),\n      value\n    }\n  }\n\n  private static encodeCollect(options: CollectOptions): string[] {\n    const calldatas: string[] = []\n\n    const tokenId = toHex(options.tokenId)\n\n    const involvesETH =\n      currencyEquals(options.expectedCurrencyOwed0.currency, ETHER) ||\n      currencyEquals(options.expectedCurrencyOwed1.currency, ETHER)\n\n    const recipient = validateAndParseAddress(options.recipient)\n\n    // collect\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\n        {\n          tokenId,\n          recipient: involvesETH ? ADDRESS_ZERO : recipient,\n          amount0Max: MaxUint128,\n          amount1Max: MaxUint128\n        }\n      ])\n    )\n\n    if (involvesETH) {\n      const ethAmount = currencyEquals(options.expectedCurrencyOwed0.currency, ETHER)\n        ? options.expectedCurrencyOwed0.raw\n        : options.expectedCurrencyOwed1.raw\n      const token = currencyEquals(options.expectedCurrencyOwed0.currency, ETHER)\n        ? (options.expectedCurrencyOwed1.currency as Token)\n        : (options.expectedCurrencyOwed0.currency as Token)\n      const tokenAmount = currencyEquals(options.expectedCurrencyOwed0.currency, ETHER)\n        ? options.expectedCurrencyOwed1.raw\n        : options.expectedCurrencyOwed0.raw\n\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('unwrapWETH9', [toHex(ethAmount), recipient])\n      )\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('sweepToken', [\n          token.address,\n          toHex(tokenAmount),\n          recipient\n        ])\n      )\n    }\n\n    return calldatas\n  }\n\n  public static collectCallParameters(options: CollectOptions): MethodParameters {\n    const calldatas: string[] = NonfungiblePositionManager.encodeCollect(options)\n\n    return {\n      calldata:\n        calldatas.length === 1\n          ? calldatas[0]\n          : NonfungiblePositionManager.INTERFACE.encodeFunctionData('multicall', [calldatas]),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   * Produces the calldata for completely or partially exiting a position\n   * @param position the position to exit\n   * @param options additional information necessary for generating the calldata\n   */\n  public static removeCallParameters(position: Position, options: RemoveLiquidityOptions): MethodParameters {\n    const calldatas: string[] = []\n\n    const deadline = toHex(options.deadline)\n    const tokenId = toHex(options.tokenId)\n\n    // construct a partial position with a percentage of liquidity\n    const partialPosition = new Position({\n      pool: position.pool,\n      liquidity: options.liquidityPercentage.multiply(position.liquidity).quotient,\n      tickLower: position.tickLower,\n      tickUpper: position.tickUpper\n    })\n    invariant(JSBI.greaterThan(partialPosition.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    // slippage-adjusted underlying amounts\n    const { amount0: amount0Min, amount1: amount1Min } = position.minimumAmounts(options.slippageTolerance)\n\n    if (options.permit) {\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n          validateAndParseAddress(options.permit.spender),\n          tokenId,\n          toHex(options.permit.deadline),\n          options.permit.v,\n          options.permit.r,\n          options.permit.s\n        ])\n      )\n    }\n\n    // remove liquidity\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('decreaseLiquidity', [\n        {\n          tokenId,\n          liquidity: toHex(partialPosition.liquidity),\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          deadline\n        }\n      ])\n    )\n\n    const { expectedCurrencyOwed0, expectedCurrencyOwed1, ...rest } = options.collectOptions\n    calldatas.push(\n      ...NonfungiblePositionManager.encodeCollect({\n        tokenId: options.tokenId,\n        // add the underlying value to the expected currency already owed\n        expectedCurrencyOwed0: expectedCurrencyOwed0.add(\n          currencyEquals(expectedCurrencyOwed0.currency, ETHER)\n            ? CurrencyAmount.ether(amount0Min)\n            : new TokenAmount(expectedCurrencyOwed0.currency as Token, amount0Min)\n        ),\n        expectedCurrencyOwed1: expectedCurrencyOwed1.add(\n          currencyEquals(expectedCurrencyOwed1.currency, ETHER)\n            ? CurrencyAmount.ether(amount1Min)\n            : new TokenAmount(expectedCurrencyOwed1.currency as Token, amount1Min)\n        ),\n        ...rest\n      })\n    )\n\n    if (options.liquidityPercentage.equalTo(ONE)) {\n      if (options.burnToken) {\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('burn', [tokenId]))\n      }\n    } else {\n      invariant(options.burnToken !== true, 'CANNOT_BURN')\n    }\n\n    return {\n      calldata: NonfungiblePositionManager.INTERFACE.encodeFunctionData('multicall', [calldatas]),\n      value: toHex(0)\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, currencyEquals, ETHER, Percent, Token, TradeType, validateAndParseAddress } from '@crystalswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { Trade } from './entities/trade'\nimport { ADDRESS_ZERO } from './constants'\nimport { PermitOptions, SelfPermit } from './selfPermit'\nimport { encodeRouteToPath } from './utils'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { abi } from '@crystalswap/v3-periphery/artifacts/contracts/SwapRouter.sol/SwapRouter.json'\n\nexport interface FeeOptions {\n  /**\n   * The percent of the output that will be taken as a fee.\n   */\n  fee: Percent\n\n  /**\n   * The recipient of the fee.\n   */\n  recipient: string\n}\n\n/**\n * Options for producing the arguments to send calls to the router.\n */\nexport interface SwapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * The account that should receive the output.\n   */\n  recipient: string\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * The optional permit parameters for spending the input.\n   */\n  inputTokenPermit?: PermitOptions\n\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * Optional information for taking a fee on output.\n   */\n  fee?: FeeOptions\n}\n\n/**\n * Represents the Crystalswap V2 SwapRouter, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouter extends SelfPermit {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    super()\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: SwapOptions): MethodParameters {\n    const calldatas: string[] = []\n\n    // encode permit if necessary\n    if (options.inputTokenPermit) {\n      invariant(trade.inputAmount.currency instanceof Token, 'NON_TOKEN_PERMIT')\n      calldatas.push(SwapRouter.encodePermit(trade.inputAmount.currency, options.inputTokenPermit))\n    }\n\n    const recipient: string = validateAndParseAddress(options.recipient)\n\n    const deadline = toHex(options.deadline)\n\n    const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance).raw)\n    const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance).raw)\n    const value: string = currencyEquals(trade.inputAmount.currency, ETHER) ? amountIn : toHex(0)\n\n    // flag for whether the trade is single hop or not\n    const singleHop = trade.route.pools.length === 1\n\n    // flag for whether a refund needs to happen\n    const mustRefund = currencyEquals(trade.inputAmount.currency, ETHER) && trade.tradeType === TradeType.EXACT_OUTPUT\n\n    // flags for whether funds should be send first to the router\n    const outputIsETHER = currencyEquals(trade.outputAmount.currency, ETHER)\n    const routerMustCustody = outputIsETHER || !!options.fee\n\n    if (singleHop) {\n      if (trade.tradeType === TradeType.EXACT_INPUT) {\n        const exactInputSingleParams = {\n          tokenIn: trade.route.tokenPath[0].address,\n          tokenOut: trade.route.tokenPath[1].address,\n          fee: trade.route.pools[0].fee,\n          recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n          deadline,\n          amountIn,\n          amountOutMinimum: amountOut,\n          sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\n        }\n\n        calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n      } else {\n        const exactOutputSingleParams = {\n          tokenIn: trade.route.tokenPath[0].address,\n          tokenOut: trade.route.tokenPath[1].address,\n          fee: trade.route.pools[0].fee,\n          recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n          deadline,\n          amountOut,\n          amountInMaximum: amountIn,\n          sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\n        }\n\n        calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\n      }\n    } else {\n      invariant(options.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n\n      const path: string = encodeRouteToPath(trade.route, trade.tradeType === TradeType.EXACT_OUTPUT)\n\n      if (trade.tradeType === TradeType.EXACT_INPUT) {\n        const exactInputParams = {\n          path,\n          recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n          deadline,\n          amountIn,\n          amountOutMinimum: amountOut\n        }\n\n        calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n      } else {\n        const exactOutputParams = {\n          path,\n          recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n          deadline,\n          amountOut,\n          amountInMaximum: amountIn\n        }\n\n        calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\n      }\n    }\n\n    // refund\n    if (mustRefund) {\n      calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('refundETH'))\n    }\n\n    // unwrap\n    if (routerMustCustody) {\n      if (!!options.fee) {\n        const feeRecipient: string = validateAndParseAddress(options.fee.recipient)\n        const fee = toHex(options.fee.fee.multiply(10_000).quotient)\n\n        if (outputIsETHER) {\n          calldatas.push(\n            SwapRouter.INTERFACE.encodeFunctionData('unwrapWETH9WithFee', [amountOut, recipient, fee, feeRecipient])\n          )\n        } else {\n          calldatas.push(\n            SwapRouter.INTERFACE.encodeFunctionData('sweepTokenWithFee', [\n              trade.route.tokenPath[trade.route.tokenPath.length - 1].address,\n              amountOut,\n              recipient,\n              fee,\n              feeRecipient\n            ])\n          )\n        }\n      } else {\n        calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('unwrapWETH9', [amountOut, recipient]))\n      }\n    }\n\n    return {\n      calldata:\n        calldatas.length === 1 ? calldatas[0] : SwapRouter.INTERFACE.encodeFunctionData('multicall', [calldatas]),\n      value\n    }\n  }\n}\n"],"names":["undefined","FACTORY_ADDRESS","ADDRESS_ZERO","POOL_INIT_CODE_HASH","FeeAmount","TICK_SPACINGS","LOW","MEDIUM","HIGH","NEGATIVE_ONE","JSBI","BigInt","ZERO","ONE","Q96","exponentiate","Q192","computePoolAddress","factoryAddress","tokenA","tokenB","fee","sortsBefore","token0","token1","getCreate2Address","keccak256","defaultAbiCoder","encode","address","LiquidityMath","addDelta","x","y","lessThan","subtract","multiply","add","FullMath","mulDivRoundingUp","a","b","denominator","product","result","divide","notEqual","remainder","MaxUint160","multiplyIn256","bitwiseAnd","MaxUint256","addIn256","sum","SqrtPriceMath","getAmount0Delta","sqrtRatioAX96","sqrtRatioBX96","liquidity","roundUp","greaterThan","numerator1","leftShift","numerator2","getAmount1Delta","getNextSqrtPriceFromInput","sqrtPX96","amountIn","zeroForOne","invariant","getNextSqrtPriceFromAmount0RoundingUp","getNextSqrtPriceFromAmount1RoundingDown","getNextSqrtPriceFromOutput","amountOut","amount","equal","greaterThanOrEqual","quotient","lessThanOrEqual","MAX_FEE","SwapMath","computeSwapStep","sqrtRatioCurrentX96","sqrtRatioTargetX96","amountRemaining","feePips","returnValues","exactIn","amountRemainingLessFee","sqrtRatioNextX96","max","feeAmount","TWO","POWERS_OF_2","map","pow","mostSignificantBit","msb","power","min","signedRightShift","mulShift","val","mulBy","Q32","TickMath","getSqrtRatioAtTick","tick","MIN_TICK","MAX_TICK","Number","isInteger","absTick","ratio","getTickAtSqrtRatio","sqrtRatioX96","MIN_SQRT_RATIO","MAX_SQRT_RATIO","sqrtRatioX128","r","log_2","i","f","bitwiseOr","log_sqrt10001","tickLow","toNumber","tickHigh","NoTickDataProvider","getTick","_tick","Error","ERROR_MESSAGE","nextInitializedTickWithinOneWord","_lte","_tickSpacing","isSorted","list","comparator","length","tickComparator","index","TickList","validateList","ticks","tickSpacing","every","reduce","accumulator","liquidityNet","isBelowSmallest","isAtOrAboveLargest","binarySearch","l","Math","floor","nextInitializedTick","lte","compressed","wordPos","minimum","maximum","toHex","bigintIsh","bigInt","hex","toString","encodeRouteToPath","route","exactOutput","firstInputToken","input","Token","Currency","ETHER","WETH9","chainId","pools","pool","inputToken","path","types","outputToken","equals","pack","reverse","encodeSqrtRatioX96","amount1","amount0","numerator","ratioX192","sqrt","maxLiquidityForAmount0","intermediate","maxLiquidityForAmount1","maxLiquidityForAmounts","liquidity0","liquidity1","nearestUsableTick","rounded","round","tickToPrice","baseToken","quoteToken","Price","priceToClosestTick","price","baseCurrency","quoteCurrency","sorted","raw","nextTickPrice","Tick","liquidityGross","TickListDataProvider","ticksMapped","t","NO_TICK_DATA_PROVIDER_DEFAULT","Pool","tickCurrent","tickCurrentSqrtRatioX96","nextTickSqrtRatioX96","tickDataProvider","Array","isArray","getAddress","involvesToken","token","priceOf","token0Price","token1Price","getOutputAmount","inputAmount","swap","outputAmount","amountCalculated","TokenAmount","getInputAmount","amountSpecified","sqrtPriceLimitX96","exactInput","state","amountSpecifiedRemaining","sqrtPriceX96","step","sqrtPriceStartX96","tickNext","initialized","sqrtPriceNextX96","_token0Price","_token1Price","Position","tickLower","tickUpper","minimumAmounts","slippageTolerance","priceLower","Percent","priceUpper","sqrtRatioX96Lower","sqrtRatioX96Upper","poolLower","poolUpper","fromAmounts","fromAmount0","fromAmount1","_token0Amount","_token1Amount","_mintAmounts","Route","output","allOnSameChain","weth","inputTokenIsInFirstPool","inputWethIsInFirstPool","inputIsValid","noOutput","outputTokenIsInLastPool","outputWethIsInLastPool","outputIsValid","tokenPath","entries","currentInputToken","nextToken","push","_midPrice","slice","nextInput","tradeComparator","currencyEquals","currency","equalTo","wrappedAmount","currencyAmount","wrappedCurrency","Trade","tradeType","fromRoute","TradeType","EXACT_INPUT","exactOut","EXACT_OUTPUT","amounts","CurrencyAmount","ether","createUncheckedTrade","constructorArguments","minimumAmountOut","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","worstExecutionPrice","bestTradeExactIn","currencyAmountIn","currencyOut","currentPools","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","sortedInsert","poolsExcludingThisPool","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","_executionPrice","isAllowedPermit","permitOptions","SelfPermit","encodePermit","options","INTERFACE","encodeFunctionData","nonce","expiry","v","s","deadline","Interface","abi","MaxUint128","isMint","Object","keys","some","k","NonfungiblePositionManager","addCallParameters","position","calldatas","mintAmounts","amount0Desired","amount1Desired","amount0Min","amount1Min","createPool","token0Permit","token1Permit","recipient","validateAndParseAddress","tokenId","value","useEther","wethValue","calldata","encodeCollect","involvesETH","expectedCurrencyOwed0","expectedCurrencyOwed1","amount0Max","amount1Max","ethAmount","tokenAmount","collectCallParameters","removeCallParameters","partialPosition","liquidityPercentage","permit","spender","collectOptions","rest","burnToken","SwapRouter","swapCallParameters","trade","inputTokenPermit","singleHop","mustRefund","outputIsETHER","routerMustCustody","exactInputSingleParams","amountOutMinimum","exactOutputSingleParams","amountInMaximum","exactInputParams","exactOutputParams","feeRecipient"],"mappings":"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"}